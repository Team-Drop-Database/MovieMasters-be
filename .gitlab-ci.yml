stages:
  - build
  - sonarqube-check
  - sonarqube-vulnerability-report
  - pull_project
  - deploy

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
  GIT_DEPTH: "0"

sonarqube-check:
  stage: sonarqube-check
  image: gradle:jdk21-alpine
  tags:
    - hva
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - sonar-scanner/
  script: 
    - gradle sonar
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  image: gradle:jdk21-alpine
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=se-specialization-2024-1_projects-tse3_drop-database_backend_63335d2d-27c8-4950-a932-d6f94f8517e4&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json

build-job:
  stage: build
  image: gradle:jdk21-alpine
  tags:
    - hva
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: always
  script: ./gradlew build -x test

pull_project_job:
  stage: pull_project
  image: ubuntu:latest
  tags:
    - hva
  only: 
    - main
  before_script:
    - apt-get update -y && apt-get install openssh-client -y && apt-get install sshpass -y
  script: 
    - sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST -p 2222 "
        cd ../movieadmin/app/backend && git pull https://$GITLAB_USERNAME:$GITLAB_ACCESS_TOKEN@gitlab.fdmci.hva.nl/se-specialization-2024-1/projects-tse3/drop-database/backend.git
        "
deploy_job:
  stage: deploy
  image: ubuntu:latest
  tags:
    - hva
  only:
    - main
  before_script:
    - apt-get update -y && apt-get install openssh-client -y && apt-get install sshpass -y
  script: 
    - sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST -p 2222 "
        cd ../movieadmin/app/backend && docker compose down --rmi all -v && docker compose build && docker compose up -d
        "
